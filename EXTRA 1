//EXTRA FUNCTION 1

void sort(){
	void showRecords(void);
	struct data structFromRecord(int);
	
	int recN, x;
    char recSearch[100];
    char str1[99];
    char input;
	
	//File Replace, Rearange, Rename, Copy Data to new .txt (wickson)
	
	//show the record number and ask for sort by record number
	FILE *file, *temp, *sort;
	
	
	
		file = fopen("Stock.txt","r+");
		temp = fopen("Temp.txt","r+");
		sort = fopen("Sort.txt","r+");

	  		

	showRecords();
		
	firstinput:
		printf("______________________________________________________\n");	
    	printf("Do you want to sort the data by record number?\n ( y / n / Q(exit))\n");
	   	scanf("%c", &input);
	   	switch(input){
				case 'y':
				case 'Y':
					goto sort;
				case 'n':
				case 'N':
					replaceagain:
				case 'q':
				case 'Q':
					break;
	            default:
	                printf("not an input, returned.");
	                goto firstinput;
			}	
	   	
    	
	//sort it...
	sort:
		strcpy(recSearch,"Record Number");
		while (fgets(str1,99,file) != NULL){
       		 
				if (strstr(str1,recSearch)){
           	 printf("%s",str1);
           	 x++;
      	  	}
   		 }
   		 
    	if (x == 0) {
    	    printf("Nothing found");
    	    return;
   		}
   		
   

    	temp = fopen("Temp.txt","w");  /// create a intermediate file for temporary storage
    	rewind(file); /// move record to starting of file
        

    char ch[100];
    char ch2[100];
    char string[100];
    
	    fseek(file, 0, SEEK_SET);
	    sprintf(ch, "Record Number: %d\n", recN);
	    while (fgets(string, 100, file) != NULL) {
	
	        if (strcmp(string, ch) == 0) {
	            fgets(string, 100, file);
	            fgets(string, 100, file);
	            fgets(string, 100, file);
	            fgets(string, 100, file);
	            fgets(string, 100, file);
	            fgets(string, 100, file);
	            fgets(string, 100, file);
	            fgets(string, 100, file);
	            fgets(string, 100, file);
	            fseek(file, 0, SEEK_CUR);
	            continue;
	        }

        fprintf(temp, "%s", string);

    }
    //first record first line record number //next nextline record number , compare their number , make a loop check , array 
    
	//do you want to replce the data by sorted data ? replace it 
	replaceagain:
		
		printf("Do you want to rplace the data by this sorted data?\n( y / n (skip) / Q(exit))");
	    scanf(" %c", &input);
	        fflush(stdin);
			switch(input){
				case 'y':
				case 'Y':
					goto replacefile;
				case 'n':
				case 'N':
					goto exportagain;
				case 'q':
				case 'Q':
					break;
	            default:
	                printf("not an input, returned.");
	                goto replaceagain;
			}	
			
	replacefile:
		
		fclose(sort);
		fclose(temp);
		fclose(file);
		
		remove("Stock.txt");
		int ret3 = rename("Temp.txt","Stock.txt");
			
	    if(ret3 == 0) {
	       printf("Replace file successfully...\n");
	    } else {
	       printf("Error: unable to Replace the file\n");
	    }
		
		file = fopen("Stock.txt","r+");
		temp = fopen("Temp.txt","r+");
		sort = fopen("Sort.txt","r+");
	    
		
	//do you want to export as a finished list? // clear the org file , replace a blank doc
	exportagain:
		
		printf("Do you want to export as a finished list (Completed.txt) ?\n( y / n / Q(exit))");
	    scanf("%c", &input);
	        fflush(stdin);
			switch(input){
				case 'y':
				case 'Y':
					goto renameagain;
				case 'n':
				case 'N':
					
				case 'q':
				case 'Q':
					break;
	            default:
	                printf("not an input, returned.");
	                goto exportagain;
			}
	//do you want to rename it ? 
	renameagain:
		
		printf("Do you want to rename the sorted data ?(y/n)");
	    scanf(" %c", &input);
	        fflush(stdin);
			switch(input){
				case 'y':
				case 'Y':
					goto retypename;
				case 'n':
				case 'N':
					break;
	            default:
	                printf("not an input, returned.");
	                goto renameagain;
			}
		
    //copy data to new txt, export for user named
   
   retypename:
   	
	   	fclose(sort);
		fclose(temp);
		fclose(file);
		
   		char retypename[20];
   		
		printf("Enter the NEW NAME for the output file (REMEMBER .txt at the end): ");
		gets(retypename);
		
		int ret1 = rename("Temp.txt",retypename);
			
	    if(ret1 == 0) {
	       printf("Rename file successfully... New name : %c\nOrg file is empty",retypename);
	    } else {
	       printf("Error: unable to rename the file\n");
	    }
	    
		goto end;
		
	exportfile:
   	
	   	fclose(sort);
		fclose(temp);
		fclose(file);
				
		int ret2 = rename("Temp.txt","ExportedStock.txt");
			
	    if(ret2 == 0) {
	       printf("Export file successfully... ");
	    } else {
	       printf("Error: unable to Export the file\n");
	    }
	    
	    int clf = remove("Stock.txt");
			
	    if(ret2 == 0) {
	       printf("Clear ORG file successfully... ");
	    } else {
	       printf("Error: unable to clear the file\n");
	    }
	    
		goto end;
		

	
	
	end:
		printf("\nPress ENTER to go back....");
    	getchar();
   		fflush(stdin);
	
	
	
	
	
}
